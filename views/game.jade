doctype html
html(lang="en")
  head
    title EtherChess
    script(src='/js/jquery-2.1.3.min.js')
    script(src='/socket.io/socket.io.js')
    script(src='/chess.min.js')
    script(src='/js/chessboard-0.3.0.min.js')
    link(rel='stylesheet', href='/css/chessboard-0.3.0.min.css')
    style.
      body { font-family: sans-serif; background-color: #eee }
      #container { margin: 0 auto; max-width: 960px; background-color: white; }
      #chessboard {
        height: 600px;
        width: 600px;
        display: inline-block;
        margin-right: 1em;
      }
      #messages { vertical-align: top; display: inline-block; max-width: 360px; }
      #messages > * { margin-bottom: 1em; }
      #timer { margin-left: 0.5em; }
      #pgn, #fen { border: 1px solid #ddd; margin: 1em 1em; font-size: 90%; word-wrap: break-word; font-family: monospace; white-space: pre-wrap; }
      #status { color: red; line-height: 2.7em; font-weight: bold; font-size: 110%; height: 2em; margin: 0.5em 1em }
  body
    #container
      #status
      #chessboard
      #messages
        #turn
          strong#color
          span#timer
        .controls
          button(type='button', class='btn-player-white') White
          button(type='button', class='btn-player-black') Black
      #pgn
    script.
      var id = "#{id}";
      var socket = io.connect(location.origin);

      var board = new ChessBoard('chessboard', {
          pieceTheme: '/img/chesspieces/wikipedia/{piece}.png',
          draggable: true,
          onDragStart: onDragStart,
          onDrop: onDrop,
          onSnapEnd: onSnapEnd
      });

      var game = Chess();
      var player = null;

      socket.on('connect', function() {
          socket.emit('connected', {id: id})
      });

      socket.on('gamestate', function(data) {
          console.log(data);

          if (data.blackPlayer) {
              $(".btn-player-black").attr({
                'disabled': 'disabled',
                'data-player': data.blackPlayer
              });
          }

          if (data.whitePlayer) {
              $(".btn-player-white").attr({
                'disabled': 'disabled',
                'data-player': data.whitePlayer
              });
          }

          game.load_pgn(data.pgn);
          board.position(game.fen());
          updateStatus();
      });

      socket.on('selected color', function(data) {
          console.log(data);

          if (data.success) {
              board.orientation(data.color);
              player = data.color;
          }

          if (data.playerId || data.success) {
              $(".btn-player-" + data.color).attr({
                'disabled': 'disabled',
                'data-player': data.playerId || socket.id
              });
          }
      });

      socket.on('moved piece', function(data) {
          console.log(data);

          game.load_pgn(data.pgn);
          board.position(game.fen());
          updateStatus();
      });

      $(".btn-player-black").on('click', function() {
          socket.emit('select color', { color: 'black' });
      });

      $(".btn-player-white").on('click', function() {
          socket.emit('select color', { color: 'white' });
      });

      function onDragStart(src, piece, pos, orientation) {
        if (player == null) {
          return false;
        }

        if (game.game_over()) {
          return false;
        }

        var orientColor = orientation.substring(0, 1);
        if (game.turn() !== orientColor) {
          return false;
        }

        var pieceColor = piece.substring(0, 1);
        if (pieceColor !== orientColor) {
          return false;
        }
      }

      function onDrop(source, target) {
        // see if the move is legal
        var proposal = {
          from: source,
          to: target,
          promotion: 'q' // NOTE: always promote to a queen for example simplicity
        }

        var move = game.move(proposal);

        // illegal move
        if (move === null) return 'snapback';

        socket.emit('move piece', { move: proposal });

        updateStatus();
      };

      // update the board position after the piece snap
      // for castling, en passant, pawn promotion
      function onSnapEnd() {
        board.position(game.fen());
      };

      var timer = $("#timer"),
          lastMove = new Date;

      function compareDates(a, b) {
        var diff = Math.abs(+b - +a) / 1000;

        var mins = diff / 60 | 0;
        var secs = "" + (diff % 60 | 0);

        if (secs.length < 2) {
          secs = "0" + secs;
        }

        return mins + ":" + secs;
      }

      function updateTimer() {
          timer.text(compareDates(lastMove, new Date));
      }
      setInterval(updateTimer, 500);

      function updateStatus() {
          lastMove = new Date;
          updateTimer();

          var color = game.turn() === "b" ? "Black" : "White";

          var playerIsWhite = board.orientation === "white";
          var isPlayerTurn = playerIsWhite && color === "White";
          var border;

          if (playerIsWhite) {
              border = color === "Black" ? "#333" : "#9f6";
          } else {
              border = color === "White" ? "#333" : "#9f6";
          }

          $("#color").text(color);

          if (game.in_checkmate()) {
            $("#status").text(color + " is in checkmate, and loses!");
          }

          else if (game.in_draw()) {
            $("#status").text("You have ended in a draw!");
          }

          else if (game.in_stalemate()) {
            $("#status").text("You have ended in a stalemate!");
          }

          else if (game.in_check()) {
            $("#status").text(color + " is in check!");
            if (isPlayerTurn) {
                border = "red";
            }
          }

          else {
            $("#status").empty();
          }

          $("#chessboard").children().children().css('border', '8px solid ' + border);

          $("#pgn").text(game.pgn());
      };

